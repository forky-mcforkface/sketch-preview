// Copyright (c) 2014 Marc Schwieterman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


@import 'lib/common.js'

// coscript.shouldKeepAround = true

function requestPreviewSize(config, doc) {
  if (!isSupportedVersion(doc)) {
    [doc showMessage:"Sketch 2 is not supported"]
    return
  }

  function _setBorderColor(view, color) {
    [view setWantsLayer:true]
    [[view layer] setBorderColor:[color CGColor]]
    [[view layer] setBorderWidth:1]
  }

  var numRadioButtons = config.SCALING_STRATEGIES.length
  var cellWidth = 480
  var cellHeight = 25
  var debugHeight = cellHeight
  var segmentedControlHeight = cellHeight// + 5
  var segmentedControlY = cellHeight
  var accessoryHeight = debugHeight + segmentedControlHeight + (cellHeight * numRadioButtons)
  var firstRadioButtonY = debugHeight + segmentedControlHeight

  var accessory = [[NSView alloc] initWithFrame:NSMakeRect(0, 0, cellWidth, accessoryHeight)]

  var debugSwitch = [[NSButton alloc] initWithFrame:NSMakeRect(0, 0, 250, debugHeight)]
  [debugSwitch setButtonType:NSSwitchButton]
  [debugSwitch setTitle:"Enable debug logging"]
  [debugSwitch setState:config.isDebug()]
  [accessory addSubview:debugSwitch]

  var segmentedControl = [[NSSegmentedControl alloc] initWithFrame:NSMakeRect(20, segmentedControlY, 512, cellHeight)]
  [segmentedControl setSegmentCount:config.PREVIEW_SIZE_LABELS.length]
  [segmentedControl setEnabled:false]
  config.PREVIEW_SIZE_LABELS.forEach(function(sizeLabel, i) {
    [segmentedControl setLabel:sizeLabel forSegment:i]
  })
  [accessory addSubview:segmentedControl]

  var radioButtons = []
  function updateControls(sender) {
    [segmentedControl setEnabled:radioButtons[3].state() == 1]
  }

  config.SCALING_STRATEGIES.forEach(function(strategy, i) {
    var buttonY = ((numRadioButtons - i - 1) * cellHeight) + firstRadioButtonY
    var button = [[NSButton alloc] initWithFrame:NSMakeRect(0, buttonY, cellWidth, cellHeight)]
    [button setButtonType:NSRadioButton]
    [button setTitle:strategy.label]
    [button setTag:strategy.strategyId]
    [button setCOSJSTargetFunction:updateControls]
    radioButtons.push(button)
    [accessory addSubview:button]
  })

  var selectedButton = radioButtons.find(function(button) {
    return button.tag() == config.getScalingStrategyId()
  })
  [selectedButton setState:1]
  selectedButton.highlight(true)
  [segmentedControl setSelectedSegment:config.getPreviewSizeLabelIndex()]
  updateControls()

  // _setBorderColor(accessory, [NSColor redColor])
  // _setBorderColor(segmentedControl, [NSColor orangeColor])

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:"Preview Setup"]
  [alert setInformativeText:"* Simulated scaling modes are experimental"]
  [alert addButtonWithTitle:"Save"]
  [alert addButtonWithTitle:"Cancel"]
  [alert setAccessoryView:accessory]

  var buttonReturnValue = [alert runModal]
  var previewSizeLabelIndex = [segmentedControl selectedSegment]
  var scalingStrategyId = radioButtons.find(function(button) {
    return button.state() == 1
  }).tag()
  var debugEnabled = [debugSwitch state]

  if (buttonReturnValue === NSAlertFirstButtonReturn) {
    config.setPreviewSizeLabelIndex(previewSizeLabelIndex)
    config.setScalingStrategyId(scalingStrategyId)
    config.setDebug(debugEnabled)
    config.save()
  }
}

function onRun(context) {
  var config = new Config()
  var doc = context.document
  requestPreviewSize(config, doc)
}

